//
//  SmartCard.swift
//  PGPro
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.

import Foundation

/**
 * Data structures modeling the (OpenPGP Smart Card specifications)[https://gnupg.org/ftp/specs/OpenPGP-smart-card-application-3.4.pdf]
 */
struct SmartCard {

    var cardholderName: String?
    var publicKeyURL: URL?

    struct Cardholder {
        var name: String?
        var language: String?
        var sex: String?

        init?(from data: Data) {
            guard data[0] == 0x65 else {
                return nil // wrong tag
            }

            // Decore and parse name data (Section 4.4.3.3; OpenPGP-smart-card-application-3.4.pdf)
            if data[2] == 0x5b {
                let nameLength = Int(data[3])
                let nameRange: ClosedRange = 4...(4+nameLength)
                let nameData = data.subdata(in: Range<Data.Index>(nameRange))

                if let name = String(data: nameData, encoding: .isoLatin1) {
                    let nameComponents = name.components(separatedBy: "<<").map { String($0) }
                    if nameComponents.count > 0 {
                        let surname = nameComponents[0]
                        if nameComponents.count > 1 {
                            let forenames = nameComponents[1]
                            self.name = forenames.replacingOccurrences(of: "<", with: " ").replacingOccurrences(of: "_", with: " ")
                        }
                        if self.name == nil {
                            self.name = surname
                        }
                        self.name = self.name!.appending(surname)
                    }
                }
            } // else skip name

            // TODO: - Parse language and sex (?)

        }
    }

    /**
     Models the status of the YubiKeys' 3 main keys (disregards the status of any other).
     The initializer returns null iff data integrity validation fails.
     */
    struct KeyInformation {
        enum KeyStatus {
            case keyNotPresent
            case keyGenerated
            case keyImported

            var description: String {
                switch self {
                case .keyNotPresent: return "Key not present"
                case .keyGenerated: return "Key generated by the card"
                case .keyImported: return "Key imported into the card"
                }
            }
        }

        var signatureKeyStatus: KeyStatus?
        var decryptionKeyStatus: KeyStatus?
        var authenticationKeyStatus: KeyStatus?

        init?(from data: Data) {
            guard data[0] == 0x01, data[2] == 0x02, data[4] == 0x03 else {
                return nil
            }

            switch data[1] {
            case 0x00:  self.signatureKeyStatus = KeyStatus.keyNotPresent
            case 0x01:  self.signatureKeyStatus = KeyStatus.keyGenerated
            case 0x02:  self.signatureKeyStatus = KeyStatus.keyImported
            default: return nil
            }

            switch data[3] {
            case 0x00:  self.decryptionKeyStatus = KeyStatus.keyNotPresent
            case 0x01:  self.decryptionKeyStatus = KeyStatus.keyGenerated
            case 0x02:  self.decryptionKeyStatus = KeyStatus.keyImported
            default: return nil
            }

            switch data[5] {
            case 0x00:  self.authenticationKeyStatus = KeyStatus.keyNotPresent
            case 0x01:  self.authenticationKeyStatus = KeyStatus.keyGenerated
            case 0x02:  self.authenticationKeyStatus = KeyStatus.keyImported
            default: return nil
            }

            // disregard any other keys that may be on the YubiKey
        }
    }

}
